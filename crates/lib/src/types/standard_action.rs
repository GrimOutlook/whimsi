use subenum::subenum;

/// This enum represents all of the standard actions available
/// in a Windows Installer (.msi) file. Each variant corresponds
/// to a specific action and includes a documentation comment
/// describing its purpose.
///
/// Documentation can be found
/// [here](https://learn.microsoft.com/en-us/windows/win32/msi/standard-actions-reference)
///
/// NOTE: Enum and docs generated by Gemini. Feel free to submit a pull request
/// if any mistakes are seen.
#[subenum(AdvtAction)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, strum::Display)]
pub enum StandardAction {
    /// A top-level action used for an administrative installation.
    ///
    /// WARN: `msitools` did not have a value listed for this
    Admin,
    /// A top-level action called to install or remove advertised components.
    ///
    /// WARN: `msitools` did not have a value listed for this
    Advertise,
    /// Validates that the free space specified by AVAILABLEFREEREG exists in
    /// the registry.
    AllocateRegistrySpace = 1550,
    /// Searches for previous versions of products and determines that upgrades
    /// are installed.
    AppSearch = 50,
    /// Binds executables to imported DLLs.
    BindImage = 4300,
    /// Uses file signatures to validate that qualifying products are installed
    /// on a system before an upgrade installation is performed.
    CcpsSearch = 500,
    /// Ends the internal installation costing process begun by the
    /// CostInitialize action.
    #[subenum(AdvtAction)]
    CostFinalize = 1000,
    /// Starts the installation costing process.
    #[subenum(AdvtAction)]
    CostInitialize = 800,
    /// Creates empty folders for components.
    CreateFolders = 3700,
    /// Creates shortcuts.
    #[subenum(AdvtAction)]
    CreateShortcuts = 4500,
    /// Removes system services.
    DeleteServices = 2000,
    /// Disables rollback for the remainder of the installation.
    ///
    /// WARN: `msitools` did not have a value listed for this
    DisableRollback,
    /// Duplicates files installed by the InstallFiles action.
    DuplicateFiles = 4210,
    /// Checks the EXECUTEACTION property to determine which top-level action
    /// begins the execution sequence, then runs that action.
    ExecuteAction = 1300,
    /// Initializes disk cost calculation with the installer.
    FileCost = 900,
    /// Detects correspondence between the Upgrade table and installed products.
    FindRelatedProducts = 25,
    /// Prompts the user for a restart of the system during the installation.
    ///
    /// WARN: `msitools` did not have a value listed for this
    ForceReboot,
    /// A top-level action called to install or remove components.
    ///
    /// WARN: `msitools` did not have a value listed for this
    Install,
    /// Copies the installer database to the administrative installation point.
    InstallAdminPackage = 3900,
    /// Runs a script containing all operations in the action sequence since
    /// either the start of the installation or the last InstallFinalize action;
    /// does not end the transaction.
    InstallExecute = 6500,
    /// Copies files from the source to the destination directory.
    InstallFiles = 4000,
    /// Runs a script containing all operations in the action sequence since
    /// either the start of the installation or the last InstallFinalize action.
    /// Marks the end of a transaction.
    #[subenum(AdvtAction)]
    InstallFinalize = 6600,
    /// Marks the beginning of a transaction.
    #[subenum(AdvtAction)]
    InstallInitialize = 1500,
    /// Installs the catalogs used by Windows Me for Windows File Protection.
    ///
    /// WARN: `msitools` did not have a value listed for this
    InstallSfpCatalogFile,
    /// Verifies that all volumes with attributed costs have sufficient space
    /// for the installation.
    #[subenum(AdvtAction)]
    InstallValidate = 1400,
    /// Processes the IsolatedComponent table.
    IsolateComponents = 950,
    /// Evaluates a set of conditional statements in the LaunchCondition table
    /// that must all be true for the installation to proceed.
    LaunchConditions = 100,
    /// Migrates current feature states to the pending installation.
    MigrateFeatureStates = 1200,
    /// Locates existing files and moves or copies them to a new location.
    MoveFiles = 3800,
    /// Configures a service for the system.
    MsiConfigureServices = 5850,
    /// Manages the advertisement of common language runtime assemblies
    /// and Win32 assemblies that are being installed.
    #[subenum(AdvtAction)]
    MsiPublishAssemblies = 6250,
    /// Manages the advertisement of common language runtime assemblies
    /// and Win32 assemblies that are being removed.
    MsiUnpublishAssemblies = 1750,
    /// Installs the ODBC drivers, translators, and data sources.
    InstallOdbc = 5400,
    /// Registers a service with the system.
    InstallServices = 5800,
    /// Queries the Patch table to determine which patches are applied to
    /// specific files and then performs the byte-wise patching of the
    /// files.
    PatchFiles = 4090,
    /// Registers components, their key paths, and component clients.
    ProcessComponents = 1600,
    /// Advertises the components specified in the PublishComponent table.
    #[subenum(AdvtAction)]
    PublishComponents = 6200,
    /// Writes the feature state of each feature into the system registry.
    #[subenum(AdvtAction)]
    PublishFeatures = 6300,
    /// Publishes product information with the system.
    #[subenum(AdvtAction)]
    PublishProduct = 6400,
    /// Manages the registration of COM class information with the system.
    #[subenum(AdvtAction)]
    RegisterClassInfo = 4600,
    /// Registers COM+ applications.
    RegisterComPlus = 5700,
    /// Registers extension-related information with the system.
    #[subenum(AdvtAction)]
    RegisterExtensionInfo = 4700,
    /// Registers installed fonts with the system.
    RegisterFonts = 5300,
    /// Registers MIME information with the system.
    #[subenum(AdvtAction)]
    RegisterMimeInfo = 4900,
    /// Registers product information with the installer and stores the
    /// installer database on the local computer.
    RegisterProduct = 6100,
    /// Registers OLE ProgId information with the system.
    #[subenum(AdvtAction)]
    RegisterProgIdInfo = 4800,
    /// Registers type libraries with the system.
    RegisterTypeLibraries = 5500,
    /// Registers user information to identify the user of a product.
    RegisterUser = 6000,
    /// Deletes files installed by the DuplicateFiles action.
    RemoveDuplicateFiles = 3400,
    /// Modifies the values of environment variables.
    RemoveEnvironmentStrings = 3300,
    /// Removes installed versions of a product.
    ///
    /// WARN: `msitools` did not have a value listed for this
    RemoveExistingProducts,
    /// Removes files previously installed by the InstallFiles action.
    RemoveFiles = 3500,
    /// Removes empty folders linked to components set to be removed.
    RemoveFolders = 3600,
    /// Deletes .ini file information associated with a component specified in
    /// the IniFile table.
    RemoveIniValues = 3100,
    /// Removes ODBC data sources, translators, and drivers.
    RemoveOdbc = 2400,
    /// Removes an application's registry keys that were created from the
    /// Registry table.
    RemoveRegistryValues = 2600,
    /// Manages the removal of an advertised shortcut whose feature is selected
    /// for uninstallation.
    RemoveShortcuts = 3200,
    /// Determines the source location and sets the SourceDir property.
    ///
    /// WARN: `msitools` did not have a value listed for this
    ResolveSource,
    /// Uses file signatures to validate that qualifying products are installed
    /// on a system before an upgrade installation is performed.
    RmccpSearch = 600,
    /// Prompts the user for a system restart at the end of the installation.
    ///
    /// WARN: `msitools` did not have a value listed for this
    ScheduleReboot,
    /// Processes modules in the SelfReg table and registers them if they are
    /// installed.
    SelfRegModules = 5600,
    /// Unregisters the modules in the SelfReg table that are set to be
    /// uninstalled.
    SelfUnregModules = 2200,
    /// Runs the actions in a table specified by the SEQUENCE property.
    ///
    /// WARN: `msitools` did not have a value listed for this
    Sequence,
    /// Checks the system for existing ODBC drivers and sets target directory
    /// for new ODBC drivers.
    SetOdbcFolders = 1100,
    /// Starts system services.
    StartServices = 5900,
    /// Stops system services.
    StopServices = 1900,
    /// Manages the unadvertisement of components from the PublishComponent
    /// table and removes information about published components.
    UnpublishComponents = 1700,
    /// Removes the selection-state and feature-component mapping information
    /// from the system registry.
    UnpublishFeatures = 1800,
    /// Manages the removal of COM classes from the system registry.
    UnregisterClassInfo = 2700,
    /// Removes COM+ applications from the registry.
    UnregisterComPlus = 2100,
    /// Manages the removal of extension-related information from the system.
    UnregisterExtensionInfo = 2800,
    /// Removes registration information about installed fonts from the system.
    UnregisterFonts = 2500,
    /// Unregisters MIME-related information from the system registry.
    UnregisterMimeInfo = 3000,
    /// Manages the unregistration of OLE ProgId information with the system.
    UnregisterProgIdInfo = 2900,
    /// Unregisters type libraries with the system.
    UnregisterTypeLibraries = 2300,
    /// Sets ProductID property to the full product identifier.
    ValidateProductId = 700,
    /// Modifies the values of environment variables.
    WriteEnvironmentStrings = 5200,
    /// Writes .ini file information.
    WriteIniValues = 5100,
    /// Sets up registry information.
    WriteRegistryValues = 5000,
}

impl msi::ToValue for AdvtAction {
    fn to_value(&self) -> msi::Value {
        self.to_string().into()
    }
}

impl msi::ToValue for StandardAction {
    fn to_value(&self) -> msi::Value {
        self.to_string().into()
    }
}
